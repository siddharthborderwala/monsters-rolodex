{"version":3,"sources":["components/Modal/Modal.jsx","components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Modal","user","className","onClick","setTimeout","ReactDOM","unmountComponentAtNode","document","getElementById","xlinkHref","src","name","alt","username","email","toLowerCase","address","street","suite","city","zipcode","phone","href","website","target","rel","company","catchPhrase","bs","Card","monster","title","render","querySelector","addEventListener","ev","closest","loading","CardList","monsters","map","key","SearchBox","props","type","value","searchTextValue","onChange","e","onSearchTextValueChange","placeholder","App","bind","state","curMonsters","val","this","filter","includes","setState","fetch","then","res","json","users","catch","err","console","log","React","Component","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6b317e93.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './modal.styles.css';\r\n\r\nexport const Modal = ({ user }) => {\r\n  const removeModal = () => {\r\n    setTimeout(() => {\r\n      ReactDOM.unmountComponentAtNode(document.getElementById('modal-portal'));\r\n    }, 100);\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal__wrapper\">\r\n      <div className=\"modal__cross--wrapper\" onClick={removeModal}>\r\n        <svg className=\"modal__cross\">\r\n          <use xlinkHref=\"/solid.svg#times-circle\"></use>\r\n        </svg>\r\n      </div>\r\n      <div className=\"modal\">\r\n        <div className=\"modal__intro\">\r\n          <img src={`https://robohash.org/${user.name}`} alt=\"Profile Pic\" />\r\n          <div>\r\n            <h2>{user.name}</h2>\r\n            <h3>{user.username}</h3>\r\n            <code>{user.email.toLowerCase()}</code>\r\n          </div>\r\n        </div>\r\n        <div className=\"modal__location\">\r\n          <h2 className=\"blue\">Location</h2>\r\n          <p>{user.address.street}</p>\r\n          <p>{user.address.suite}</p>\r\n          <p>{user.address.city}</p>\r\n          <p>{user.address.zipcode}</p>\r\n        </div>\r\n        <div className=\"modal__contact\">\r\n          <h3 className=\"blue\">\r\n            Phone\r\n            <br />\r\n            <span>{user.phone}</span>\r\n          </h3>\r\n          <h3 className=\"blue\">\r\n            Website\r\n            <br />\r\n            <span>\r\n              <a\r\n                href={`https://${user.website}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                {user.website}\r\n              </a>\r\n            </span>\r\n          </h3>\r\n        </div>\r\n        <div className=\"modal__company\">\r\n          <h2 className=\"blue\">Company Information</h2>\r\n          <p>{user.company.name}</p>\r\n          <p>{user.company.catchPhrase}</p>\r\n          <p>{user.company.bs}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './card.styles.css';\r\n\r\nimport { Modal } from './../Modal/Modal';\r\n\r\nexport const Card = ({ monster }) => {\r\n  const renderModal = () => {\r\n    ReactDOM.render(\r\n      <Modal user={monster} />,\r\n      document.getElementById('modal-portal')\r\n    );\r\n    document\r\n      .querySelector('.modal__wrapper')\r\n      .addEventListener('click', (ev) => {\r\n        if (!ev.target.closest('.modal')) {\r\n          setTimeout(() => {\r\n            ReactDOM.unmountComponentAtNode(\r\n              document.getElementById('modal-portal')\r\n            );\r\n          }, 100);\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\" title={monster.name} onClick={renderModal}>\r\n      <img\r\n        loading=\"lazy\"\r\n        className=\"card__img\"\r\n        src={`https://robohash.org/${monster.name}`}\r\n        alt=\"Monster Pic\"\r\n      />\r\n      <h3 className=\"card__title\">{monster.name}</h3>\r\n      <code className=\"card__email-id\">{monster.email.toLowerCase()}</code>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from './../Card/Card';\r\n\r\nexport const CardList = ({ monsters }) => {\r\n  return (\r\n    <div className=\"cardlist\">\r\n      {monsters.map((monster) => (\r\n        <Card key={monster.name} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => {\r\n  const clearSearch = (e) => {\r\n    e.target.value = '';\r\n    props.onSearchTextValueChange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchbox\">\r\n      <input\r\n        type=\"text\"\r\n        value={props.searchTextValue}\r\n        onChange={(e) => {\r\n          props.onSearchTextValueChange(e.target.value);\r\n        }}\r\n        className=\"searchbox__input\"\r\n        placeholder=\"Search a monster\"\r\n      />\r\n      <svg className=\"cross\" onClick={clearSearch}>\r\n        <use xlinkHref=\"/solid.svg#times-circle\"></use>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/CardList/CardList';\nimport { SearchBox } from './components/SearchBox/SearchBox';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSearchTextValueChange = this.onSearchTextValueChange.bind(this);\n\n    this.state = {\n      monsters: [],\n      searchTextValue: '',\n      curMonsters: [],\n    };\n  }\n\n  onSearchTextValueChange(val) {\n    const curMonsters = this.state.monsters.filter(({ name }) =>\n      name.toLowerCase().includes(val.toLowerCase())\n    );\n    this.setState(() => ({ curMonsters, searchTextValue: val }));\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((res) => res.json())\n      .then((users) => {\n        this.setState(() => {\n          return { monsters: users, curMonsters: users };\n        });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <h1 className=\"app-heading\">Monsters Rolodex</h1>\n          <SearchBox\n            searchTextValue={this.state.searchTextValue}\n            onSearchTextValueChange={this.onSearchTextValueChange}\n          />\n          <CardList monsters={this.state.curMonsters} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}